type User @entity {
  id: ID! # the userId
  assetConfigs: [UserAssetConfig!]! @derivedFrom(field: "user")
  splitsEntryIds: [String!]!
  splitsEntries: [SplitsEntry!]! @derivedFrom(field: "sender")
  splitsReceiversHash: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}

type UserAssetConfig @entity {
  id: ID! # the userId + "-" + assetId
  user: User!
  assetId: BigInt!
  dripsEntryIds: [String!]!
  dripsEntries: [DripsEntry!]! @derivedFrom(field: "senderAssetConfig")
  balance: BigInt! # the user's balance for the asset at last top-up
  assetConfigHash: Bytes!
  amountCollected: BigInt!
  lastUpdatedBlockTimestamp: BigInt!
}

type DripsSetEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  userId: BigInt! # the userId of the sender
  assetId: BigInt!
  receiversHash: Bytes! # the hash of the receivers list
  dripsReceiverSeenEvents: [DripsReceiverSeenEvent!]! @derivedFrom(field: "dripsSetEvent")
  dripsHistoryHash: Bytes! # the history hash of this drips-set for squeezing
  balance: BigInt!
  blockTimestamp: BigInt!
  maxEnd: BigInt!
}

type LastSetDripsUserMapping @entity {
  id: ID! # receiversHash
  dripsSetEventId: String! # the ID of the last DripsSetEvent that was created with this receiversHash
  userId: BigInt! # the last userId that SetDrips was called for with this receiversHash
  assetId: BigInt! # the last assetId that SetDrips was called for with this receiversHash
}

type DripsReceiverSeenEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  dripsSetEvent: DripsSetEvent!
  receiversHash: Bytes!
  senderUserId: BigInt!
  receiverUserId: BigInt! # the receiver's userId
  config: BigInt!
  blockTimestamp: BigInt!
}

type DripsEntry @entity {
  id: ID! # sender's userId + "-" + receiver's userId + "-" + assetId
  sender: User!
  senderAssetConfig: UserAssetConfig!
  receiverUserId: BigInt! # the receiver's userId
  config: BigInt!
}

type ReceivedDripsEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  userId: BigInt! # the sender's userId
  assetId: BigInt!
  amt: BigInt!
  receivableCycles: BigInt!
  blockTimestamp: BigInt!
}

type SqueezedDripsEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  userId: BigInt! # the sender's userId
  assetId: BigInt!
  senderId: BigInt!
  amt: BigInt!
  nextSqueezed: BigInt!
  blockTimestamp: BigInt!
}

type SplitsSetEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  userId: BigInt! # the userId of the sender
  receiversHash: Bytes! # the hash of the receivers list
  splitsReceiverSeenEvents: [SplitsReceiverSeenEvent!]! @derivedFrom(field: "splitsSetEvent")
  blockTimestamp: BigInt!
}

type LastSetSplitsUserMapping @entity {
  id: ID! # receiversHash
  splitsSetEventId: String! # the ID of the last SplitsSetEvent that was created with this receiversHash
  userId: BigInt! # the last userId that SetSplits was called for with this receiversHash
}

type SplitsReceiverSeenEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  splitsSetEvent: SplitsSetEvent!
  receiversHash: Bytes!
  senderUserId: BigInt! # the sender's userId
  receiverUserId: BigInt! # the receiver's userId
  weight: BigInt!
  blockTimestamp: BigInt!
}

type SplitsEntry @entity {
  id: ID! # sender's userId + "-" + receiver's userId
  sender: User!
  receiverUserId: BigInt! # the receiver's userId
  weight: BigInt!
}

type SplitEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  userId: BigInt! # the sender's userId
  receiverId: BigInt! # the receiver's userId
  assetId: BigInt!
  amt: BigInt!
  blockTimestamp: BigInt!
}

type CollectedEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  user: User!
  assetId: BigInt!
  collected: BigInt!
  blockTimestamp: BigInt!
}

type IdentityMetaData @entity {
  id: ID! # the address
  key: Bytes!
  multiHash: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}

type GivenEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  userId: BigInt!
  receiverUserId: BigInt! # the receiver's userId
  assetId: BigInt!
  amt: BigInt!
  blockTimestamp: BigInt!
}

type App @entity {
  id: ID! # the appId
  appAddress: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}