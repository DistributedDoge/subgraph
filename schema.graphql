type AccountMetadataByKey @entity {
  id: ID! # accountId + "-" + key
  accountId: String!
  key: Bytes!
  value: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}

type AccountMetadataEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String!
  key: Bytes!
  value: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}

# TODO: rename to AddressAccount
type Account @entity {
  id: ID! # the accountId
  assetConfigs: [AccountAssetConfig!]! @derivedFrom(field: "account")
  splitsEntryIds: [String!]!
  splitsEntries: [SplitsEntry!]! @derivedFrom(field: "sender")
  splitsReceiversHash: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}

# TODO: rename to AddressAccountAssetConfig
type AccountAssetConfig @entity {
  id: ID! # the accountId + "-" + assetId
  account: Account!
  assetId: BigInt!
  streamsEntryIds: [String!]!
  streamsEntries: [StreamsEntry!]! @derivedFrom(field: "senderAssetConfig")
  balance: BigInt! # the account's balance for the asset at last top-up
  assetConfigHash: Bytes!
  amountSplittable: BigInt!
  amountPostSplitCollectable: BigInt!
  amountCollected: BigInt!
  lastUpdatedBlockTimestamp: BigInt!
}

type StreamsSetEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String! # the accountId of the sender
  assetId: BigInt!
  receiversHash: Bytes! # the hash of the receivers list
  streamReceiverSeenEvents: [StreamReceiverSeenEvent!]! @derivedFrom(field: "streamsSetEvent")
  streamsHistoryHash: Bytes! # the history hash of this streams-set for squeezing
  balance: BigInt!
  blockTimestamp: BigInt!
  maxEnd: BigInt!
}

type LastSetStreamAccountMapping @entity {
  id: ID! # receiversHash
  streamsSetEventId: String! # the ID of the last StreamsSetEvent that was created with this receiversHash
  accountId: String! # the last accountId that SetStreams was called for with this receiversHash
  assetId: BigInt! # the last assetId that SetStreams was called for with this receiversHash
}

type StreamReceiverSeenEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  streamsSetEvent: StreamsSetEvent!
  receiversHash: Bytes!
  senderAccountId: String!
  receiverAccountId: String! # the receiver's accountId
  config: BigInt!
  blockTimestamp: BigInt!
}

type StreamsEntry @entity {
  id: ID! # sender's accountId + "-" + receiver's accountId + "-" + assetId
  sender: Account!
  senderAssetConfig: AccountAssetConfig!
  accountId: String! # the receiver's accountId
  config: BigInt!
}

type ReceivedStreamsEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String! # the sender's accountId
  assetId: BigInt!
  amt: BigInt!
  receivableCycles: BigInt!
  blockTimestamp: BigInt!
}

type SqueezedStreamsEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String! # the sender's accountId
  assetId: BigInt!
  senderId: String!
  amt: BigInt!
  blockTimestamp: BigInt!
  streamsHistoryHashes: [Bytes!]!
}

type SplitsSetEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String! # the accountId of the sender
  receiversHash: Bytes! # the hash of the receivers list
  splitsReceiverSeenEvents: [SplitsReceiverSeenEvent!]! @derivedFrom(field: "splitsSetEvent")
  blockTimestamp: BigInt!
}

type LastSetSplitsAccountMapping @entity {
  id: ID! # receiversHash
  splitsSetEventId: String! # the ID of the last SplitsSetEvent that was created with this receiversHash
  accountId: String! # the last accountId that SetSplits was called for with this receiversHash
}

type SplitsReceiverSeenEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  splitsSetEvent: SplitsSetEvent!
  receiversHash: Bytes!
  senderAccountId: String! # the sender's accountId
  receiverAccountId: String! # the receiver's accountId
  weight: BigInt!
  blockTimestamp: BigInt!
}

type SplitsEntry @entity {
  id: ID! # sender's accountId + "-" + receiver's accountId
  sender: Account!
  accountId: String! # the receiver's accountId
  weight: BigInt!
}

type SplitEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String! # the sender's accountId
  receiverId: String! # the receiver's accountId
  assetId: BigInt!
  amt: BigInt!
  blockTimestamp: BigInt!
}

type CollectableEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  account: Account!
  assetId: BigInt!
  amt: BigInt!
  blockTimestamp: BigInt!
}

type CollectedEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  account: Account!
  assetId: BigInt!
  collected: BigInt!
  blockTimestamp: BigInt!
}

type GivenEvent @entity {
  id: ID! # event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  accountId: String!
  receiverAccountId: String! # the receiver's accountId
  assetId: BigInt!
  amt: BigInt!
  blockTimestamp: BigInt!
}

type App @entity {
  id: ID! # the appId
  appAddress: Bytes!
  lastUpdatedBlockTimestamp: BigInt!
}

type NFTSubAccount @entity {
  id: ID! # the NFT token ID
  ownerAddress: Bytes!
}

type ImmutableSplitsCreated @entity {
  id: ID! # accountId + "-" + receiversHash
  accountId: String!
  receiversHash: Bytes!
}

type RepoAccount @entity {
  id: ID! # the accountId
  name: String! # The name of the repository.
  forge: BigInt!
  status: String # null, 'CLAIMED' or 'OWNER_UPDATE_REQUESTED'.
  ownerAddress: String
  lastUpdatedBlockTimestamp: BigInt!
}
