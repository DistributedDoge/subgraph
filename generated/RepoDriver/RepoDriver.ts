// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AnyApiOperatorUpdated extends ethereum.Event {
  get params(): AnyApiOperatorUpdated__Params {
    return new AnyApiOperatorUpdated__Params(this);
  }
}

export class AnyApiOperatorUpdated__Params {
  _event: AnyApiOperatorUpdated;

  constructor(event: AnyApiOperatorUpdated) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get jobId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get defaultFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewAdminProposed extends ethereum.Event {
  get params(): NewAdminProposed__Params {
    return new NewAdminProposed__Params(this);
  }
}

export class NewAdminProposed__Params {
  _event: NewAdminProposed;

  constructor(event: NewAdminProposed) {
    this._event = event;
  }

  get currentAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerUpdateRequested extends ethereum.Event {
  get params(): OwnerUpdateRequested__Params {
    return new OwnerUpdateRequested__Params(this);
  }
}

export class OwnerUpdateRequested__Params {
  _event: OwnerUpdateRequested;

  constructor(event: OwnerUpdateRequested) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get forge(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get name(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserGranted extends ethereum.Event {
  get params(): PauserGranted__Params {
    return new PauserGranted__Params(this);
  }
}

export class PauserGranted__Params {
  _event: PauserGranted;

  constructor(event: PauserGranted) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauserRevoked extends ethereum.Event {
  get params(): PauserRevoked__Params {
    return new PauserRevoked__Params(this);
  }
}

export class PauserRevoked__Params {
  _event: PauserRevoked;

  constructor(event: PauserRevoked) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RepoDriver__anyApiOperatorResult {
  value0: Address;
  value1: Bytes;
  value2: BigInt;

  constructor(value0: Address, value1: Bytes, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getOperator(): Address {
    return this.value0;
  }

  getJobId(): Bytes {
    return this.value1;
  }

  getDefaultFee(): BigInt {
    return this.value2;
  }
}

export class RepoDriver__setDripsInputCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class RepoDriver__setDripsInputNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class RepoDriver extends ethereum.SmartContract {
  static bind(address: Address): RepoDriver {
    return new RepoDriver("RepoDriver", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPausers(): Array<Address> {
    let result = super.call("allPausers", "allPausers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allPausers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("allPausers", "allPausers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  anyApiOperator(): RepoDriver__anyApiOperatorResult {
    let result = super.call(
      "anyApiOperator",
      "anyApiOperator():(address,bytes32,uint96)",
      []
    );

    return new RepoDriver__anyApiOperatorResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBigInt()
    );
  }

  try_anyApiOperator(): ethereum.CallResult<RepoDriver__anyApiOperatorResult> {
    let result = super.tryCall(
      "anyApiOperator",
      "anyApiOperator():(address,bytes32,uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RepoDriver__anyApiOperatorResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBigInt()
      )
    );
  }

  calcUserId(forge: i32, name: Bytes): BigInt {
    let result = super.call("calcUserId", "calcUserId(uint8,bytes):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forge)),
      ethereum.Value.fromBytes(name)
    ]);

    return result[0].toBigInt();
  }

  try_calcUserId(forge: i32, name: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcUserId",
      "calcUserId(uint8,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forge)),
        ethereum.Value.fromBytes(name)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(userId: BigInt, erc20: Address, transferTo: Address): BigInt {
    let result = super.call(
      "collect",
      "collect(uint256,address,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(transferTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_collect(
    userId: BigInt,
    erc20: Address,
    transferTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect(uint256,address,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(transferTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dripsHub(): Address {
    let result = super.call("dripsHub", "dripsHub():(address)", []);

    return result[0].toAddress();
  }

  try_dripsHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("dripsHub", "dripsHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  driverId(): BigInt {
    let result = super.call("driverId", "driverId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_driverId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("driverId", "driverId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(pauser: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(pauser: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  linkToken(): Address {
    let result = super.call("linkToken", "linkToken():(address)", []);

    return result[0].toAddress();
  }

  try_linkToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkToken", "linkToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(userId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(userId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(userId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(userId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposedAdmin(): Address {
    let result = super.call("proposedAdmin", "proposedAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_proposedAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposedAdmin",
      "proposedAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  requestUpdateOwner(forge: i32, name: Bytes): BigInt {
    let result = super.call(
      "requestUpdateOwner",
      "requestUpdateOwner(uint8,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forge)),
        ethereum.Value.fromBytes(name)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestUpdateOwner(forge: i32, name: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestUpdateOwner",
      "requestUpdateOwner(uint8,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forge)),
        ethereum.Value.fromBytes(name)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setDrips(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<RepoDriver__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<RepoDriver__setDripsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt,
    transferTo: Address
  ): BigInt {
    let result = super.call(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32,address):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2),
        ethereum.Value.fromAddress(transferTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_setDrips(
    userId: BigInt,
    erc20: Address,
    currReceivers: Array<RepoDriver__setDripsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<RepoDriver__setDripsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt,
    transferTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setDrips",
      "setDrips(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32,address):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(userId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2),
        ethereum.Value.fromAddress(transferTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dripsHub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get forwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _driverId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get transferTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmitUserMetadataCall extends ethereum.Call {
  get inputs(): EmitUserMetadataCall__Inputs {
    return new EmitUserMetadataCall__Inputs(this);
  }

  get outputs(): EmitUserMetadataCall__Outputs {
    return new EmitUserMetadataCall__Outputs(this);
  }
}

export class EmitUserMetadataCall__Inputs {
  _call: EmitUserMetadataCall;

  constructor(call: EmitUserMetadataCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get userMetadata(): Array<EmitUserMetadataCallUserMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      EmitUserMetadataCallUserMetadataStruct
    >();
  }
}

export class EmitUserMetadataCall__Outputs {
  _call: EmitUserMetadataCall;

  constructor(call: EmitUserMetadataCall) {
    this._call = call;
  }
}

export class EmitUserMetadataCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class GrantPauserCall extends ethereum.Call {
  get inputs(): GrantPauserCall__Inputs {
    return new GrantPauserCall__Inputs(this);
  }

  get outputs(): GrantPauserCall__Outputs {
    return new GrantPauserCall__Outputs(this);
  }
}

export class GrantPauserCall__Inputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantPauserCall__Outputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProposeNewAdminCall extends ethereum.Call {
  get inputs(): ProposeNewAdminCall__Inputs {
    return new ProposeNewAdminCall__Inputs(this);
  }

  get outputs(): ProposeNewAdminCall__Outputs {
    return new ProposeNewAdminCall__Outputs(this);
  }
}

export class ProposeNewAdminCall__Inputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeNewAdminCall__Outputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall extends ethereum.Call {
  get inputs(): RenounceAdminCall__Inputs {
    return new RenounceAdminCall__Inputs(this);
  }

  get outputs(): RenounceAdminCall__Outputs {
    return new RenounceAdminCall__Outputs(this);
  }
}

export class RenounceAdminCall__Inputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall__Outputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RequestUpdateOwnerCall extends ethereum.Call {
  get inputs(): RequestUpdateOwnerCall__Inputs {
    return new RequestUpdateOwnerCall__Inputs(this);
  }

  get outputs(): RequestUpdateOwnerCall__Outputs {
    return new RequestUpdateOwnerCall__Outputs(this);
  }
}

export class RequestUpdateOwnerCall__Inputs {
  _call: RequestUpdateOwnerCall;

  constructor(call: RequestUpdateOwnerCall) {
    this._call = call;
  }

  get forge(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get name(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RequestUpdateOwnerCall__Outputs {
  _call: RequestUpdateOwnerCall;

  constructor(call: RequestUpdateOwnerCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokePauserCall extends ethereum.Call {
  get inputs(): RevokePauserCall__Inputs {
    return new RevokePauserCall__Inputs(this);
  }

  get outputs(): RevokePauserCall__Outputs {
    return new RevokePauserCall__Outputs(this);
  }
}

export class RevokePauserCall__Inputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokePauserCall__Outputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }
}

export class SetDripsCall extends ethereum.Call {
  get inputs(): SetDripsCall__Inputs {
    return new SetDripsCall__Inputs(this);
  }

  get outputs(): SetDripsCall__Outputs {
    return new SetDripsCall__Outputs(this);
  }
}

export class SetDripsCall__Inputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SetDripsCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetDripsCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetDripsCallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetDripsCallNewReceiversStruct
    >();
  }

  get maxEndHint1(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxEndHint2(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get transferTo(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SetDripsCall__Outputs {
  _call: SetDripsCall;

  constructor(call: SetDripsCall) {
    this._call = call;
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDripsCallCurrReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetDripsCallNewReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetSplitsCall extends ethereum.Call {
  get inputs(): SetSplitsCall__Inputs {
    return new SetSplitsCall__Inputs(this);
  }

  get outputs(): SetSplitsCall__Outputs {
    return new SetSplitsCall__Outputs(this);
  }
}

export class SetSplitsCall__Inputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receivers(): Array<SetSplitsCallReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetSplitsCallReceiversStruct
    >();
  }
}

export class SetSplitsCall__Outputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }
}

export class SetSplitsCallReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateAnyApiOperatorCall extends ethereum.Call {
  get inputs(): UpdateAnyApiOperatorCall__Inputs {
    return new UpdateAnyApiOperatorCall__Inputs(this);
  }

  get outputs(): UpdateAnyApiOperatorCall__Outputs {
    return new UpdateAnyApiOperatorCall__Outputs(this);
  }
}

export class UpdateAnyApiOperatorCall__Inputs {
  _call: UpdateAnyApiOperatorCall;

  constructor(call: UpdateAnyApiOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get jobId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get defaultFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateAnyApiOperatorCall__Outputs {
  _call: UpdateAnyApiOperatorCall;

  constructor(call: UpdateAnyApiOperatorCall) {
    this._call = call;
  }
}

export class UpdateOwnerByAnyApiCall extends ethereum.Call {
  get inputs(): UpdateOwnerByAnyApiCall__Inputs {
    return new UpdateOwnerByAnyApiCall__Inputs(this);
  }

  get outputs(): UpdateOwnerByAnyApiCall__Outputs {
    return new UpdateOwnerByAnyApiCall__Outputs(this);
  }
}

export class UpdateOwnerByAnyApiCall__Inputs {
  _call: UpdateOwnerByAnyApiCall;

  constructor(call: UpdateOwnerByAnyApiCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ownerRaw(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateOwnerByAnyApiCall__Outputs {
  _call: UpdateOwnerByAnyApiCall;

  constructor(call: UpdateOwnerByAnyApiCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
