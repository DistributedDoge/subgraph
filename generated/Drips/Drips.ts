// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountMetadataEmitted extends ethereum.Event {
  get params(): AccountMetadataEmitted__Params {
    return new AccountMetadataEmitted__Params(this);
  }
}

export class AccountMetadataEmitted__Params {
  _event: AccountMetadataEmitted;

  constructor(event: AccountMetadataEmitted) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get key(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Collectable extends ethereum.Event {
  get params(): Collectable__Params {
    return new Collectable__Params(this);
  }
}

export class Collectable__Params {
  _event: Collectable;

  constructor(event: Collectable) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Collected extends ethereum.Event {
  get params(): Collected__Params {
    return new Collected__Params(this);
  }
}

export class Collected__Params {
  _event: Collected;

  constructor(event: Collected) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collected(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DriverAddressUpdated extends ethereum.Event {
  get params(): DriverAddressUpdated__Params {
    return new DriverAddressUpdated__Params(this);
  }
}

export class DriverAddressUpdated__Params {
  _event: DriverAddressUpdated;

  constructor(event: DriverAddressUpdated) {
    this._event = event;
  }

  get driverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldDriverAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDriverAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DriverRegistered extends ethereum.Event {
  get params(): DriverRegistered__Params {
    return new DriverRegistered__Params(this);
  }
}

export class DriverRegistered__Params {
  _event: DriverRegistered;

  constructor(event: DriverRegistered) {
    this._event = event;
  }

  get driverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get driverAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Given extends ethereum.Event {
  get params(): Given__Params {
    return new Given__Params(this);
  }
}

export class Given__Params {
  _event: Given;

  constructor(event: Given) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewAdminProposed extends ethereum.Event {
  get params(): NewAdminProposed__Params {
    return new NewAdminProposed__Params(this);
  }
}

export class NewAdminProposed__Params {
  _event: NewAdminProposed;

  constructor(event: NewAdminProposed) {
    this._event = event;
  }

  get currentAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserGranted extends ethereum.Event {
  get params(): PauserGranted__Params {
    return new PauserGranted__Params(this);
  }
}

export class PauserGranted__Params {
  _event: PauserGranted;

  constructor(event: PauserGranted) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauserRevoked extends ethereum.Event {
  get params(): PauserRevoked__Params {
    return new PauserRevoked__Params(this);
  }
}

export class PauserRevoked__Params {
  _event: PauserRevoked;

  constructor(event: PauserRevoked) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReceivedStreams extends ethereum.Event {
  get params(): ReceivedStreams__Params {
    return new ReceivedStreams__Params(this);
  }
}

export class ReceivedStreams__Params {
  _event: ReceivedStreams;

  constructor(event: ReceivedStreams) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get receivableCycles(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Split extends ethereum.Event {
  get params(): Split__Params {
    return new Split__Params(this);
  }
}

export class Split__Params {
  _event: Split;

  constructor(event: Split) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SplitsReceiverSeen extends ethereum.Event {
  get params(): SplitsReceiverSeen__Params {
    return new SplitsReceiverSeen__Params(this);
  }
}

export class SplitsReceiverSeen__Params {
  _event: SplitsReceiverSeen;

  constructor(event: SplitsReceiverSeen) {
    this._event = event;
  }

  get receiversHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get accountId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SplitsSet extends ethereum.Event {
  get params(): SplitsSet__Params {
    return new SplitsSet__Params(this);
  }
}

export class SplitsSet__Params {
  _event: SplitsSet;

  constructor(event: SplitsSet) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SqueezedStreams extends ethereum.Event {
  get params(): SqueezedStreams__Params {
    return new SqueezedStreams__Params(this);
  }
}

export class SqueezedStreams__Params {
  _event: SqueezedStreams;

  constructor(event: SqueezedStreams) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get senderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get streamsHistoryHashes(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }
}

export class StreamReceiverSeen extends ethereum.Event {
  get params(): StreamReceiverSeen__Params {
    return new StreamReceiverSeen__Params(this);
  }
}

export class StreamReceiverSeen__Params {
  _event: StreamReceiverSeen;

  constructor(event: StreamReceiverSeen) {
    this._event = event;
  }

  get receiversHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get accountId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get config(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StreamsSet extends ethereum.Event {
  get params(): StreamsSet__Params {
    return new StreamsSet__Params(this);
  }
}

export class StreamsSet__Params {
  _event: StreamsSet;

  constructor(event: StreamsSet) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get streamsHistoryHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get balance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxEnd(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Drips__balanceAtInputCurrReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__balancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStreamsBalance(): BigInt {
    return this.value0;
  }

  getSplitsBalance(): BigInt {
    return this.value1;
  }
}

export class Drips__hashSplitsInputReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__hashStreamsInputReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__setStreamsInputCurrReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__setStreamsInputNewReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__splitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollectableAmt(): BigInt {
    return this.value0;
  }

  getSplitAmt(): BigInt {
    return this.value1;
  }
}

export class Drips__splitInputCurrReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__splitResultResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollectableAmt(): BigInt {
    return this.value0;
  }

  getSplitAmt(): BigInt {
    return this.value1;
  }
}

export class Drips__splitResultInputCurrReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__squeezeStreamsInputStreamsHistoryStruct extends ethereum.Tuple {
  get streamsHash(): Bytes {
    return this[0].toBytes();
  }

  get receivers(): Array<
    Drips__squeezeStreamsInputStreamsHistoryReceiversStruct
  > {
    return this[1].toTupleArray<
      Drips__squeezeStreamsInputStreamsHistoryReceiversStruct
    >();
  }

  get updateTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEnd(): BigInt {
    return this[3].toBigInt();
  }
}

export class Drips__squeezeStreamsInputStreamsHistoryReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__squeezeStreamsResultInputStreamsHistoryStruct extends ethereum.Tuple {
  get streamsHash(): Bytes {
    return this[0].toBytes();
  }

  get receivers(): Array<
    Drips__squeezeStreamsResultInputStreamsHistoryReceiversStruct
  > {
    return this[1].toTupleArray<
      Drips__squeezeStreamsResultInputStreamsHistoryReceiversStruct
    >();
  }

  get updateTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEnd(): BigInt {
    return this[3].toBigInt();
  }
}

export class Drips__squeezeStreamsResultInputStreamsHistoryReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class Drips__streamsStateResult {
  value0: Bytes;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStreamsHash(): Bytes {
    return this.value0;
  }

  getStreamsHistoryHash(): Bytes {
    return this.value1;
  }

  getUpdateTime(): BigInt {
    return this.value2;
  }

  getBalance(): BigInt {
    return this.value3;
  }

  getMaxEnd(): BigInt {
    return this.value4;
  }
}

export class Drips extends ethereum.SmartContract {
  static bind(address: Address): Drips {
    return new Drips("Drips", address);
  }

  AMT_PER_SEC_EXTRA_DECIMALS(): i32 {
    let result = super.call(
      "AMT_PER_SEC_EXTRA_DECIMALS",
      "AMT_PER_SEC_EXTRA_DECIMALS():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_AMT_PER_SEC_EXTRA_DECIMALS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "AMT_PER_SEC_EXTRA_DECIMALS",
      "AMT_PER_SEC_EXTRA_DECIMALS():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  AMT_PER_SEC_MULTIPLIER(): BigInt {
    let result = super.call(
      "AMT_PER_SEC_MULTIPLIER",
      "AMT_PER_SEC_MULTIPLIER():(uint160)",
      []
    );

    return result[0].toBigInt();
  }

  try_AMT_PER_SEC_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AMT_PER_SEC_MULTIPLIER",
      "AMT_PER_SEC_MULTIPLIER():(uint160)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DRIVER_ID_OFFSET(): i32 {
    let result = super.call(
      "DRIVER_ID_OFFSET",
      "DRIVER_ID_OFFSET():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_DRIVER_ID_OFFSET(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "DRIVER_ID_OFFSET",
      "DRIVER_ID_OFFSET():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MAX_SPLITS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_SPLITS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SPLITS_RECEIVERS",
      "MAX_SPLITS_RECEIVERS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_STREAMS_RECEIVERS(): BigInt {
    let result = super.call(
      "MAX_STREAMS_RECEIVERS",
      "MAX_STREAMS_RECEIVERS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STREAMS_RECEIVERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STREAMS_RECEIVERS",
      "MAX_STREAMS_RECEIVERS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOTAL_BALANCE(): BigInt {
    let result = super.call(
      "MAX_TOTAL_BALANCE",
      "MAX_TOTAL_BALANCE():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_TOTAL_BALANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOTAL_BALANCE",
      "MAX_TOTAL_BALANCE():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SPLITS_WEIGHT(): BigInt {
    let result = super.call(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_SPLITS_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_SPLITS_WEIGHT",
      "TOTAL_SPLITS_WEIGHT():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPausers(): Array<Address> {
    let result = super.call("allPausers", "allPausers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allPausers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("allPausers", "allPausers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceAt(
    accountId: BigInt,
    erc20: Address,
    currReceivers: Array<Drips__balanceAtInputCurrReceiversStruct>,
    timestamp: BigInt
  ): BigInt {
    let result = super.call(
      "balanceAt",
      "balanceAt(uint256,address,(uint256,uint256)[],uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceAt(
    accountId: BigInt,
    erc20: Address,
    currReceivers: Array<Drips__balanceAtInputCurrReceiversStruct>,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAt",
      "balanceAt(uint256,address,(uint256,uint256)[],uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(erc20: Address): Drips__balancesResult {
    let result = super.call("balances", "balances(address):(uint128,uint128)", [
      ethereum.Value.fromAddress(erc20)
    ]);

    return new Drips__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_balances(erc20: Address): ethereum.CallResult<Drips__balancesResult> {
    let result = super.tryCall(
      "balances",
      "balances(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(erc20)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Drips__balancesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collect(accountId: BigInt, erc20: Address): BigInt {
    let result = super.call("collect", "collect(uint256,address):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromAddress(erc20)
    ]);

    return result[0].toBigInt();
  }

  try_collect(accountId: BigInt, erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectable(accountId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "collectable",
      "collectable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_collectable(
    accountId: BigInt,
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectable",
      "collectable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cycleSecs(): BigInt {
    let result = super.call("cycleSecs", "cycleSecs():(uint32)", []);

    return result[0].toBigInt();
  }

  try_cycleSecs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cycleSecs", "cycleSecs():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  driverAddress(driverId: BigInt): Address {
    let result = super.call(
      "driverAddress",
      "driverAddress(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(driverId)]
    );

    return result[0].toAddress();
  }

  try_driverAddress(driverId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "driverAddress",
      "driverAddress(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(driverId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashSplits(receivers: Array<Drips__hashSplitsInputReceiversStruct>): Bytes {
    let result = super.call(
      "hashSplits",
      "hashSplits((uint256,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashSplits(
    receivers: Array<Drips__hashSplitsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashSplits",
      "hashSplits((uint256,uint32)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashStreams(receivers: Array<Drips__hashStreamsInputReceiversStruct>): Bytes {
    let result = super.call(
      "hashStreams",
      "hashStreams((uint256,uint256)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );

    return result[0].toBytes();
  }

  try_hashStreams(
    receivers: Array<Drips__hashStreamsInputReceiversStruct>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashStreams",
      "hashStreams((uint256,uint256)[]):(bytes32)",
      [ethereum.Value.fromTupleArray(receivers)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashStreamsHistory(
    oldStreamsHistoryHash: Bytes,
    streamsHash: Bytes,
    updateTime: BigInt,
    maxEnd: BigInt
  ): Bytes {
    let result = super.call(
      "hashStreamsHistory",
      "hashStreamsHistory(bytes32,bytes32,uint32,uint32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(oldStreamsHistoryHash),
        ethereum.Value.fromFixedBytes(streamsHash),
        ethereum.Value.fromUnsignedBigInt(updateTime),
        ethereum.Value.fromUnsignedBigInt(maxEnd)
      ]
    );

    return result[0].toBytes();
  }

  try_hashStreamsHistory(
    oldStreamsHistoryHash: Bytes,
    streamsHash: Bytes,
    updateTime: BigInt,
    maxEnd: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashStreamsHistory",
      "hashStreamsHistory(bytes32,bytes32,uint32,uint32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(oldStreamsHistoryHash),
        ethereum.Value.fromFixedBytes(streamsHash),
        ethereum.Value.fromUnsignedBigInt(updateTime),
        ethereum.Value.fromUnsignedBigInt(maxEnd)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(pauser: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(pauser: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(pauser)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minAmtPerSec(): BigInt {
    let result = super.call("minAmtPerSec", "minAmtPerSec():(uint160)", []);

    return result[0].toBigInt();
  }

  try_minAmtPerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minAmtPerSec", "minAmtPerSec():(uint160)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDriverId(): BigInt {
    let result = super.call("nextDriverId", "nextDriverId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_nextDriverId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextDriverId", "nextDriverId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposedAdmin(): Address {
    let result = super.call("proposedAdmin", "proposedAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_proposedAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposedAdmin",
      "proposedAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  receivableStreamsCycles(accountId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "receivableStreamsCycles",
      "receivableStreamsCycles(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_receivableStreamsCycles(
    accountId: BigInt,
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receivableStreamsCycles",
      "receivableStreamsCycles(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  receiveStreams(accountId: BigInt, erc20: Address, maxCycles: BigInt): BigInt {
    let result = super.call(
      "receiveStreams",
      "receiveStreams(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return result[0].toBigInt();
  }

  try_receiveStreams(
    accountId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receiveStreams",
      "receiveStreams(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  receiveStreamsResult(
    accountId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): BigInt {
    let result = super.call(
      "receiveStreamsResult",
      "receiveStreamsResult(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );

    return result[0].toBigInt();
  }

  try_receiveStreamsResult(
    accountId: BigInt,
    erc20: Address,
    maxCycles: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receiveStreamsResult",
      "receiveStreamsResult(uint256,address,uint32):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(maxCycles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerDriver(driverAddr: Address): BigInt {
    let result = super.call(
      "registerDriver",
      "registerDriver(address):(uint32)",
      [ethereum.Value.fromAddress(driverAddr)]
    );

    return result[0].toBigInt();
  }

  try_registerDriver(driverAddr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerDriver",
      "registerDriver(address):(uint32)",
      [ethereum.Value.fromAddress(driverAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setStreams(
    accountId: BigInt,
    erc20: Address,
    currReceivers: Array<Drips__setStreamsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<Drips__setStreamsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt
  ): BigInt {
    let result = super.call(
      "setStreams",
      "setStreams(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2)
      ]
    );

    return result[0].toBigInt();
  }

  try_setStreams(
    accountId: BigInt,
    erc20: Address,
    currReceivers: Array<Drips__setStreamsInputCurrReceiversStruct>,
    balanceDelta: BigInt,
    newReceivers: Array<Drips__setStreamsInputNewReceiversStruct>,
    maxEndHint1: BigInt,
    maxEndHint2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setStreams",
      "setStreams(uint256,address,(uint256,uint256)[],int128,(uint256,uint256)[],uint32,uint32):(int128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromSignedBigInt(balanceDelta),
        ethereum.Value.fromTupleArray(newReceivers),
        ethereum.Value.fromUnsignedBigInt(maxEndHint1),
        ethereum.Value.fromUnsignedBigInt(maxEndHint2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  split(
    accountId: BigInt,
    erc20: Address,
    currReceivers: Array<Drips__splitInputCurrReceiversStruct>
  ): Drips__splitResult {
    let result = super.call(
      "split",
      "split(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );

    return new Drips__splitResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_split(
    accountId: BigInt,
    erc20: Address,
    currReceivers: Array<Drips__splitInputCurrReceiversStruct>
  ): ethereum.CallResult<Drips__splitResult> {
    let result = super.tryCall(
      "split",
      "split(uint256,address,(uint256,uint32)[]):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromTupleArray(currReceivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Drips__splitResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  splitResult(
    accountId: BigInt,
    currReceivers: Array<Drips__splitResultInputCurrReceiversStruct>,
    amount: BigInt
  ): Drips__splitResultResult {
    let result = super.call(
      "splitResult",
      "splitResult(uint256,(uint256,uint32)[],uint128):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new Drips__splitResultResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_splitResult(
    accountId: BigInt,
    currReceivers: Array<Drips__splitResultInputCurrReceiversStruct>,
    amount: BigInt
  ): ethereum.CallResult<Drips__splitResultResult> {
    let result = super.tryCall(
      "splitResult",
      "splitResult(uint256,(uint256,uint32)[],uint128):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromTupleArray(currReceivers),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Drips__splitResultResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  splitsHash(accountId: BigInt): Bytes {
    let result = super.call("splitsHash", "splitsHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(accountId)
    ]);

    return result[0].toBytes();
  }

  try_splitsHash(accountId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("splitsHash", "splitsHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(accountId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  splittable(accountId: BigInt, erc20: Address): BigInt {
    let result = super.call(
      "splittable",
      "splittable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return result[0].toBigInt();
  }

  try_splittable(
    accountId: BigInt,
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "splittable",
      "splittable(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  squeezeStreams(
    accountId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    streamsHistory: Array<Drips__squeezeStreamsInputStreamsHistoryStruct>
  ): BigInt {
    let result = super.call(
      "squeezeStreams",
      "squeezeStreams(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(streamsHistory)
      ]
    );

    return result[0].toBigInt();
  }

  try_squeezeStreams(
    accountId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    streamsHistory: Array<Drips__squeezeStreamsInputStreamsHistoryStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "squeezeStreams",
      "squeezeStreams(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(streamsHistory)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  squeezeStreamsResult(
    accountId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    streamsHistory: Array<Drips__squeezeStreamsResultInputStreamsHistoryStruct>
  ): BigInt {
    let result = super.call(
      "squeezeStreamsResult",
      "squeezeStreamsResult(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(streamsHistory)
      ]
    );

    return result[0].toBigInt();
  }

  try_squeezeStreamsResult(
    accountId: BigInt,
    erc20: Address,
    senderId: BigInt,
    historyHash: Bytes,
    streamsHistory: Array<Drips__squeezeStreamsResultInputStreamsHistoryStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "squeezeStreamsResult",
      "squeezeStreamsResult(uint256,address,uint256,bytes32,(bytes32,(uint256,uint256)[],uint32,uint32)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromUnsignedBigInt(senderId),
        ethereum.Value.fromFixedBytes(historyHash),
        ethereum.Value.fromTupleArray(streamsHistory)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  streamsState(accountId: BigInt, erc20: Address): Drips__streamsStateResult {
    let result = super.call(
      "streamsState",
      "streamsState(uint256,address):(bytes32,bytes32,uint32,uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );

    return new Drips__streamsStateResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_streamsState(
    accountId: BigInt,
    erc20: Address
  ): ethereum.CallResult<Drips__streamsStateResult> {
    let result = super.tryCall(
      "streamsState",
      "streamsState(uint256,address):(bytes32,bytes32,uint32,uint128,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(erc20)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Drips__streamsStateResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cycleSecs_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmitAccountMetadataCall extends ethereum.Call {
  get inputs(): EmitAccountMetadataCall__Inputs {
    return new EmitAccountMetadataCall__Inputs(this);
  }

  get outputs(): EmitAccountMetadataCall__Outputs {
    return new EmitAccountMetadataCall__Outputs(this);
  }
}

export class EmitAccountMetadataCall__Inputs {
  _call: EmitAccountMetadataCall;

  constructor(call: EmitAccountMetadataCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get accountMetadata(): Array<EmitAccountMetadataCallAccountMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      EmitAccountMetadataCallAccountMetadataStruct
    >();
  }
}

export class EmitAccountMetadataCall__Outputs {
  _call: EmitAccountMetadataCall;

  constructor(call: EmitAccountMetadataCall) {
    this._call = call;
  }
}

export class EmitAccountMetadataCallAccountMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class GrantPauserCall extends ethereum.Call {
  get inputs(): GrantPauserCall__Inputs {
    return new GrantPauserCall__Inputs(this);
  }

  get outputs(): GrantPauserCall__Outputs {
    return new GrantPauserCall__Outputs(this);
  }
}

export class GrantPauserCall__Inputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantPauserCall__Outputs {
  _call: GrantPauserCall;

  constructor(call: GrantPauserCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProposeNewAdminCall extends ethereum.Call {
  get inputs(): ProposeNewAdminCall__Inputs {
    return new ProposeNewAdminCall__Inputs(this);
  }

  get outputs(): ProposeNewAdminCall__Outputs {
    return new ProposeNewAdminCall__Outputs(this);
  }
}

export class ProposeNewAdminCall__Inputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeNewAdminCall__Outputs {
  _call: ProposeNewAdminCall;

  constructor(call: ProposeNewAdminCall) {
    this._call = call;
  }
}

export class ReceiveStreamsCall extends ethereum.Call {
  get inputs(): ReceiveStreamsCall__Inputs {
    return new ReceiveStreamsCall__Inputs(this);
  }

  get outputs(): ReceiveStreamsCall__Outputs {
    return new ReceiveStreamsCall__Outputs(this);
  }
}

export class ReceiveStreamsCall__Inputs {
  _call: ReceiveStreamsCall;

  constructor(call: ReceiveStreamsCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxCycles(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReceiveStreamsCall__Outputs {
  _call: ReceiveStreamsCall;

  constructor(call: ReceiveStreamsCall) {
    this._call = call;
  }

  get receivedAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterDriverCall extends ethereum.Call {
  get inputs(): RegisterDriverCall__Inputs {
    return new RegisterDriverCall__Inputs(this);
  }

  get outputs(): RegisterDriverCall__Outputs {
    return new RegisterDriverCall__Outputs(this);
  }
}

export class RegisterDriverCall__Inputs {
  _call: RegisterDriverCall;

  constructor(call: RegisterDriverCall) {
    this._call = call;
  }

  get driverAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterDriverCall__Outputs {
  _call: RegisterDriverCall;

  constructor(call: RegisterDriverCall) {
    this._call = call;
  }

  get driverId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceAdminCall extends ethereum.Call {
  get inputs(): RenounceAdminCall__Inputs {
    return new RenounceAdminCall__Inputs(this);
  }

  get outputs(): RenounceAdminCall__Outputs {
    return new RenounceAdminCall__Outputs(this);
  }
}

export class RenounceAdminCall__Inputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall__Outputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RevokePauserCall extends ethereum.Call {
  get inputs(): RevokePauserCall__Inputs {
    return new RevokePauserCall__Inputs(this);
  }

  get outputs(): RevokePauserCall__Outputs {
    return new RevokePauserCall__Outputs(this);
  }
}

export class RevokePauserCall__Inputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }

  get pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokePauserCall__Outputs {
  _call: RevokePauserCall;

  constructor(call: RevokePauserCall) {
    this._call = call;
  }
}

export class SetSplitsCall extends ethereum.Call {
  get inputs(): SetSplitsCall__Inputs {
    return new SetSplitsCall__Inputs(this);
  }

  get outputs(): SetSplitsCall__Outputs {
    return new SetSplitsCall__Outputs(this);
  }
}

export class SetSplitsCall__Inputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receivers(): Array<SetSplitsCallReceiversStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetSplitsCallReceiversStruct
    >();
  }
}

export class SetSplitsCall__Outputs {
  _call: SetSplitsCall;

  constructor(call: SetSplitsCall) {
    this._call = call;
  }
}

export class SetSplitsCallReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetStreamsCall extends ethereum.Call {
  get inputs(): SetStreamsCall__Inputs {
    return new SetStreamsCall__Inputs(this);
  }

  get outputs(): SetStreamsCall__Outputs {
    return new SetStreamsCall__Outputs(this);
  }
}

export class SetStreamsCall__Inputs {
  _call: SetStreamsCall;

  constructor(call: SetStreamsCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SetStreamsCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetStreamsCallCurrReceiversStruct
    >();
  }

  get balanceDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newReceivers(): Array<SetStreamsCallNewReceiversStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SetStreamsCallNewReceiversStruct
    >();
  }

  get maxEndHint1(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxEndHint2(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SetStreamsCall__Outputs {
  _call: SetStreamsCall;

  constructor(call: SetStreamsCall) {
    this._call = call;
  }

  get realBalanceDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetStreamsCallCurrReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetStreamsCallNewReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class SplitCall extends ethereum.Call {
  get inputs(): SplitCall__Inputs {
    return new SplitCall__Inputs(this);
  }

  get outputs(): SplitCall__Outputs {
    return new SplitCall__Outputs(this);
  }
}

export class SplitCall__Inputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currReceivers(): Array<SplitCallCurrReceiversStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SplitCallCurrReceiversStruct
    >();
  }
}

export class SplitCall__Outputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get collectableAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get splitAmt(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SplitCallCurrReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SqueezeStreamsCall extends ethereum.Call {
  get inputs(): SqueezeStreamsCall__Inputs {
    return new SqueezeStreamsCall__Inputs(this);
  }

  get outputs(): SqueezeStreamsCall__Outputs {
    return new SqueezeStreamsCall__Outputs(this);
  }
}

export class SqueezeStreamsCall__Inputs {
  _call: SqueezeStreamsCall;

  constructor(call: SqueezeStreamsCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get senderId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get historyHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get streamsHistory(): Array<SqueezeStreamsCallStreamsHistoryStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      SqueezeStreamsCallStreamsHistoryStruct
    >();
  }
}

export class SqueezeStreamsCall__Outputs {
  _call: SqueezeStreamsCall;

  constructor(call: SqueezeStreamsCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SqueezeStreamsCallStreamsHistoryStruct extends ethereum.Tuple {
  get streamsHash(): Bytes {
    return this[0].toBytes();
  }

  get receivers(): Array<SqueezeStreamsCallStreamsHistoryReceiversStruct> {
    return this[1].toTupleArray<
      SqueezeStreamsCallStreamsHistoryReceiversStruct
    >();
  }

  get updateTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEnd(): BigInt {
    return this[3].toBigInt();
  }
}

export class SqueezeStreamsCallStreamsHistoryReceiversStruct extends ethereum.Tuple {
  get accountId(): BigInt {
    return this[0].toBigInt();
  }

  get config(): BigInt {
    return this[1].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateDriverAddressCall extends ethereum.Call {
  get inputs(): UpdateDriverAddressCall__Inputs {
    return new UpdateDriverAddressCall__Inputs(this);
  }

  get outputs(): UpdateDriverAddressCall__Outputs {
    return new UpdateDriverAddressCall__Outputs(this);
  }
}

export class UpdateDriverAddressCall__Inputs {
  _call: UpdateDriverAddressCall;

  constructor(call: UpdateDriverAddressCall) {
    this._call = call;
  }

  get driverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newDriverAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateDriverAddressCall__Outputs {
  _call: UpdateDriverAddressCall;

  constructor(call: UpdateDriverAddressCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
