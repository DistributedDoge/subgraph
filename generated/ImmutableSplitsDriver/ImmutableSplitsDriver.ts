// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreatedSplits extends ethereum.Event {
  get params(): CreatedSplits__Params {
    return new CreatedSplits__Params(this);
  }
}

export class CreatedSplits__Params {
  _event: CreatedSplits;

  constructor(event: CreatedSplits) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiversHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ImmutableSplitsDriver__createSplitsInputReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class ImmutableSplitsDriver__createSplitsInputUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class ImmutableSplitsDriver extends ethereum.SmartContract {
  static bind(address: Address): ImmutableSplitsDriver {
    return new ImmutableSplitsDriver("ImmutableSplitsDriver", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createSplits(
    receivers: Array<ImmutableSplitsDriver__createSplitsInputReceiversStruct>,
    userMetadata: Array<
      ImmutableSplitsDriver__createSplitsInputUserMetadataStruct
    >
  ): BigInt {
    let result = super.call(
      "createSplits",
      "createSplits((uint256,uint32)[],(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromTupleArray(receivers),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_createSplits(
    receivers: Array<ImmutableSplitsDriver__createSplitsInputReceiversStruct>,
    userMetadata: Array<
      ImmutableSplitsDriver__createSplitsInputUserMetadataStruct
    >
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createSplits",
      "createSplits((uint256,uint32)[],(bytes32,bytes)[]):(uint256)",
      [
        ethereum.Value.fromTupleArray(receivers),
        ethereum.Value.fromTupleArray(userMetadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dripsHub(): Address {
    let result = super.call("dripsHub", "dripsHub():(address)", []);

    return result[0].toAddress();
  }

  try_dripsHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("dripsHub", "dripsHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  driverId(): BigInt {
    let result = super.call("driverId", "driverId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_driverId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("driverId", "driverId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextUserId(): BigInt {
    let result = super.call("nextUserId", "nextUserId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextUserId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextUserId", "nextUserId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalSplitsWeight(): BigInt {
    let result = super.call(
      "totalSplitsWeight",
      "totalSplitsWeight():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSplitsWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSplitsWeight",
      "totalSplitsWeight():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dripsHub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _driverId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class CreateSplitsCall extends ethereum.Call {
  get inputs(): CreateSplitsCall__Inputs {
    return new CreateSplitsCall__Inputs(this);
  }

  get outputs(): CreateSplitsCall__Outputs {
    return new CreateSplitsCall__Outputs(this);
  }
}

export class CreateSplitsCall__Inputs {
  _call: CreateSplitsCall;

  constructor(call: CreateSplitsCall) {
    this._call = call;
  }

  get receivers(): Array<CreateSplitsCallReceiversStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CreateSplitsCallReceiversStruct
    >();
  }

  get userMetadata(): Array<CreateSplitsCallUserMetadataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      CreateSplitsCallUserMetadataStruct
    >();
  }
}

export class CreateSplitsCall__Outputs {
  _call: CreateSplitsCall;

  constructor(call: CreateSplitsCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateSplitsCallReceiversStruct extends ethereum.Tuple {
  get userId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class CreateSplitsCallUserMetadataStruct extends ethereum.Tuple {
  get key(): Bytes {
    return this[0].toBytes();
  }

  get value(): Bytes {
    return this[1].toBytes();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
